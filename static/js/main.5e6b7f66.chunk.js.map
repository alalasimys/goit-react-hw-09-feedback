{"version":3,"sources":["Components/Feedback/Section.js","Components/Feedback/FeedbackOptions.js","Components/Feedback/Statistics.js","Components/Feedback/Notification.js","App.js","index.js"],"names":["Section","children","className","FeedbackOptions","options","onLeaveFeedback","ButtonGroup","aria-label","Object","keys","map","key","Button","name","onClick","e","currentTarget","Statistics","stats","total","positivePercentage","entries","first","second","Notification","message","App","useState","good","setGood","neutral","setNeutral","bad","setBad","feedbackOptions","countTotalFeedback","prevGood","prevNeutral","prevBad","console","warn","Math","floor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAUeA,EARC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,yBAASC,UAAU,UAAnB,SAA8BD,K,gBCqBjBE,EApBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,cAACC,EAAA,EAAD,CAAaC,aAAW,yBAAxB,SACGC,OAAOC,KAAKL,GAASM,KAAI,SAACC,GAAD,OACxB,cAACC,EAAA,EAAD,CAEEC,KAAMF,EACNG,QAAS,SAACC,GAAD,OAAOV,EAAgBU,EAAEC,cAAcH,OAHlD,SAKGF,GAJIA,SCaAM,EApBI,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,MAAOC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAClC,OACE,sBAAKlB,UAAU,aAAf,UACGM,OAAOa,QAAQH,GAAOR,KAAI,mCAAEY,EAAF,KAASC,EAAT,YACzB,8BACE,uBAAMrB,UAAU,YAAhB,UAA6BoB,EAA7B,OADF,IAC+CC,IADvCD,MAIV,wCAAWH,KACX,oDAAuBC,EAAvB,WCHSI,EANM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KC2D3BC,G,MApDH,WACV,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsBJ,mBAAS,GAA/B,mBAAOK,EAAP,KAAYC,EAAZ,KAmBMC,EAAkB,CAAEN,OAAME,UAASE,OAEnCG,EAAqB,WACzB,OAAOP,EAAOE,EAAUE,GAO1B,OACE,eAAC,EAAD,WACE,4DACA,cAAC,EAAD,CACE5B,QAAS8B,EACT7B,gBAhCe,SAACQ,GACpB,OAAQA,GACN,IAAK,OACHgB,GAAQ,SAACO,GAAD,OAAcA,EAAW,KACjC,MACF,IAAK,UACHL,GAAW,SAACM,GAAD,OAAiBA,EAAc,KAC1C,MACF,IAAK,MACHJ,GAAO,SAACK,GAAD,OAAaA,EAAU,KAC9B,MAEF,QACEC,QAAQC,KAAR,wDAA2B3B,EAA3B,2GAqBCsB,IACD,cAAC,EAAD,CACEjB,MAAOgB,EACPf,MAAOgB,IACPf,mBAdCQ,EAAOa,KAAKC,MAAOd,EAAOO,IAAwB,KAAO,IAiB5D,cAAC,EAAD,CAAcV,QAAQ,yBCnD9BkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5e6b7f66.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst Section = ({ children }) => (\n  <section className=\"Section\">{children}</section>\n);\n\nSection.propTypes = {\n  children: PropTypes.array.isRequired,\n};\n\nexport default Section;\n","import PropTypes from \"prop-types\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <ButtonGroup aria-label=\"outlined  button group\">\n      {Object.keys(options).map((key) => (\n        <Button\n          key={key}\n          name={key}\n          onClick={(e) => onLeaveFeedback(e.currentTarget.name)}\n        >\n          {key}\n        </Button>\n      ))}\n    </ButtonGroup>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\n\nconst Statistics = ({ stats, total, positivePercentage }) => {\n  return (\n    <div className=\"Statistics\">\n      {Object.entries(stats).map(([first, second]) => (\n        <p key={first}>\n          <span className=\"StateName\">{first}:</span> {second}\n        </p>\n      ))}\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </div>\n  );\n};\n\nStatistics.propTypes = {\n  stats: PropTypes.objectOf(PropTypes.number.isRequired),\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import { useState } from \"react\";\n\n//Components\nimport Section from \"./Components/Feedback/Section\";\nimport FeedbackOptions from \"./Components/Feedback/FeedbackOptions\";\nimport Statistics from \"./Components/Feedback/Statistics\";\nimport Notification from \"./Components/Feedback/Notification\";\nimport \"./Components/Feedback/styles.css\";\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleChange = (name) => {\n    switch (name) {\n      case \"good\":\n        setGood((prevGood) => prevGood + 1);\n        break;\n      case \"neutral\":\n        setNeutral((prevNeutral) => prevNeutral + 1);\n        break;\n      case \"bad\":\n        setBad((prevBad) => prevBad + 1);\n        break;\n\n      default:\n        console.warn(`Тип поля - ${name} не обрабатывается`);\n    }\n  };\n\n  const feedbackOptions = { good, neutral, bad };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    return good ? Math.floor((good / countTotalFeedback()) * 100) : 0;\n  };\n\n  return (\n    <Section>\n      <h3>PLEASE LEAVE YOUR FEEDBACK</h3>\n      <FeedbackOptions\n        options={feedbackOptions}\n        onLeaveFeedback={handleChange}\n      />\n      {!!countTotalFeedback() ? (\n        <Statistics\n          stats={feedbackOptions}\n          total={countTotalFeedback()}\n          positivePercentage={countPositiveFeedbackPercentage()}\n        />\n      ) : (\n        <Notification message=\"No feedback yet\" />\n      )}\n    </Section>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}